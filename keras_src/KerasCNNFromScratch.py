from keras import backend as Kimport numpy as npfrom keras.models import Modelfrom keras.layers import Input, Dense, Dropout, Flatten, Convolution1D, MaxPooling1Dfrom keras.optimizers import SGDfrom keras import initializationsfrom keras.layers.advanced_activations import ThresholdedReLUK._EPSILON = 10e-6quantization_size = 70maxInput_size = 1014templateArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',                 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '\n', '-', ',', ';',                 '.', '!', '?', ':', '"', '\'', ' ', '/', '\\', '|', '_', '@', '#', '$', '%', '^', '&', '*', '~', '`',                 '+', '-', '=', '<', '>', '(', ')', '[', ']', '{', '}']def gaussian_init(shape, name=None):    return initializations.normal(shape, scale=0.05, name=name)def arrange_input(input_table):    categories = []    values = []    for line in input_table:        split_line = line.split('","')        category = split_line[0][1:]        title = split_line[1]        description = split_line[2]        categories.append(category)        values.append(title + " " + description)    return categories, valuesdef quantize_character(char):    quantized_char = np.zeros(quantization_size)    if char in templateArray:        quantized_char[templateArray.index(char)] = 1    return quantized_char.transpose()def quantize_values(input_array):    quantized_input = np.zeros((len(input_array), maxInput_size, quantization_size))    for i, article in enumerate(input_array):        for j, char in enumerate(article):            quantized_input[i, j] = quantize_character(char)            if j == maxInput_size - 1:                break        if i % 10000 == 0 and i > 0:            print("{} articles quantized".format(i))    print("{} articles quantized".format(len(quantized_input)))    return quantized_inputdef quantize_categories(input_array, cat_dim):    quantized_input = np.zeros((len(input_array), cat_dim))    for i, article_cat in enumerate(input_array):        quantized_input[i, int(article_cat) - 1] = 1        if i % 10000 == 0 and i > 0:            print("{} categories quantized".format(i))    print("{} categories quantized".format(len(quantized_input)))    return quantized_input######################################################################################################################print('Opening input files...')test_input = open('/Users/admin/Documents/University/DeepLearningProject/TextClassificationDatasets/'                  'ag_news_csv/test.csv', 'r')train_input = open('/Users/admin/Documents/University/DeepLearningProject/TextClassificationDatasets/'                   'ag_news_csv/train.csv', 'r')print('Arranging input to correct format...')train_categories_int, train_strings = arrange_input(train_input)test_categories_int, test_strings = arrange_input(test_input)num_of_cat = len(set(train_categories_int))print('Executing train set quantization...')train_values = quantize_values(train_strings)train_labels = quantize_categories(train_categories_int, num_of_cat)print('Executing test set quantization...')test_values = quantize_values(test_strings)test_labels = quantize_categories(test_categories_int, num_of_cat)print('Values and labels have been successfully formatted')sgd = SGD(lr=0.01, momentum=0.9, decay=1e-5)inputs = Input(shape=(maxInput_size, quantization_size))x = Convolution1D(256, 7, init=gaussian_init)(inputs)x = ThresholdedReLU(theta=1e-6,)(x)x = MaxPooling1D(pool_length=3, stride=3, border_mode='valid')(x)x = Convolution1D(256, 7, init=gaussian_init)(x)x = ThresholdedReLU(theta=1e-6)(x)x = MaxPooling1D(pool_length=3, stride=3, border_mode='valid')(x)x = Convolution1D(256, 3, init=gaussian_init)(x)x = ThresholdedReLU(theta=1e-6)(x)x = Convolution1D(256, 3, init=gaussian_init)(x)x = ThresholdedReLU(theta=1e-6)(x)x = Convolution1D(256, 3, init=gaussian_init)(x)x = ThresholdedReLU(theta=1e-6)(x)x = Convolution1D(256, 3, init=gaussian_init)(x)x = ThresholdedReLU(theta=1e-6)(x)x = MaxPooling1D(pool_length=3, stride=3, border_mode='valid')(x)flt = Flatten()(x)fc1 = Dense(1024, init=gaussian_init)(flt)fc1 = ThresholdedReLU(theta=1e-6)(fc1)do1 = Dropout(0.5)(fc1)fc2 = Dense(1024, init=gaussian_init)(do1)fc2 = ThresholdedReLU(theta=1e-6)(fc2)do2 = Dropout(0.5)(fc2)predict = Dense(num_of_cat, activation='softmax', init=gaussian_init)(do2)model = Model(input=inputs, output=predict)model.compile(optimizer=sgd, loss='categorical_crossentropy', metrics=['accuracy'])print('Fitting...')for iteration in range(0, 3):    if iteration >= 1:        cur_lr = model.optimizer.lr.get_value()        model.optimizer.lr.set_value(cur_lr / 2)    model.fit(train_values, train_labels, batch_size=128, nb_epoch=10, validation_data=(test_values, test_labels),              verbose=1)  # starts trainingmodel.save("SavedKerasModel")